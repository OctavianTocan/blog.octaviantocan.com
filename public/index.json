[{"content":"I\u0026rsquo;ve been giving some thought to the idea of creating an MCP for Unreal Engine that allows you to connect an AI model like Claude to Unreal Engine, not to do thing like what you see the YouTube gurus preach, like spawn cubes or create levels, which I\u0026rsquo;ve always found awfully lame, but instead to help enhance your daily workflows.\nI\u0026rsquo;ve been giving some thought to the idea of creating a model context protocol for Unreal Engine that would allow you to connect an AI model like Claude desktop to Unreal. But not to do things that I\u0026rsquo;ve seen a lot of other people tout on YouTube. Like, wow, you can spawn cubes and create levels. I\u0026rsquo;ve always thought that was a little\u0026hellip; lame, I think.\nSo instead, what\u0026rsquo;s been more interesting to me is the idea of integrating the models into what you do on a daily basis and enhancing things that you perhaps already do as opposed to trying to get them to do complete level creation, or complete blueprint creation, which are very complicated and require a very long set of steps.\nI don\u0026rsquo;t think you can really get an LLM to do something like that successfully right now. At least not to a level which is really convincingly good.\nHere\u0026rsquo;s what I actually want to build: I\u0026rsquo;ve been thinking about basically giving it access to things that you do on a daily basis like creating blueprints, refactoring nodes, extracting the parts that are interesting out of functions. Just writing tool tips, writing documentation, speeding up workflows that we all do.\nMy first and most prioritized usage right now is the blueprint refactoring usage. So prioritizing that usage for me is very important.\nMy blueprint refactoring toolkit I\u0026rsquo;m thinking of taking some of the code I have in the BlueprintTraverser class, and moving it to a tool inside of custom implementation of the MCP thing.\nFunctions:\nGetAllGraphNames - Returns the names of all the graphs in the Blueprint GetAllEventNamesInGraph(String: graph_name) - Returns the names of all the events in the specific graph in the asset GetAllFunctionNames - Returns an array of strings with the function names GetFunctionInfo(String: function_name) - Returns information about a specific function in JSON format with name, tooltip, category, whether it\u0026rsquo;s pure, thread safe, const, plus all the inputs and outputs with their types Variables:\nGetAllVariableNames - If I get one of these then it can use the names to access more information about this variable GetVariableInfo(String: variable_name) - This one is really useful to get all the information about one specific variable SetVariableInfo(VariableInfo: variable_info) - For making changes I could also add things like:\nGetFunctionExplanation(String: function_name) - Explains what a function does in a simple manner CreateFunction(FunctionInfo: function_info) I\u0026rsquo;m stuck on this problem\u0026hellip; I\u0026rsquo;m not really sure if it\u0026rsquo;s useful to give all the nodes and the connections like I had them in the blueprint documentation generator. But I could because I already have all the code for that. Though if I do it that way, I\u0026rsquo;m not sure if I have the benefit of saving it to memory.\nAnd regardless of anything else, none of these ways of talking about things will actually let it help me arrange them or do things in the editor. All of these are about it reading and most it can maybe write tooltips, or categorize functions, but actually changing nodes seems really far-fetched.\nThe memory problem that\u0026rsquo;s anoying me I need a form of memory for this AI where it\u0026rsquo;ll remember the connections really well, and I\u0026rsquo;ll be able to retrace them somehow.\nI want to have some sort of toolset for Claude to be able to help me refactor blueprints. Refactoring in this case understood as: the process of shifting nodes from one function to another after having thoroughly analyzed the systems in the project to see what can be improved, creating new functions to extract sets of nodes into\u0026hellip; etc.\nOne example of such refactoring might be understanding a graph (through JSON), and being capable of using tools to extract nodes, move nodes\u0026hellip; etc. to ensure that the functionality remains but we achieve a better result at a system level.\nSome interesting stuff I ran into while building this I found someone on YouTube who had already created a base MCP, but it was for UE 5.6, and I\u0026rsquo;m working in UE 5.0, so I had to port that first. Additionally, the base structure was way too over-architected and had too many components, so I had to reduce a ton and simplify.\nIn the process, a lot of things broke. I think a lot of that was quite interesting, actually, and I wish I had filmed it.\nOne thing I think is interesting to mention is that in Claude Desktop, there are now two types of \u0026ldquo;MCPs.\u0026rdquo; There\u0026rsquo;s stdio MCPs which would just be using a normal Python script, and then there are DTX files, which are basically packaged connectors. They seem to have a better way of dealing with dependencies. It kind of reminded me of Docker files in a way, which is interesting because Docker Hub has a section for dockerized MCPs.\nWhere I think this could actually go The idea isn\u0026rsquo;t to have AI write blueprints from scratch, but to give it the analytical capabilities needed to suggest meaningful refactoring opportunities. Like understanding a sprawling event graph, identifying logical groupings of nodes, and suggesting extractions into focused, reusable functions.\nIt\u0026rsquo;s not about replacing the developer\u0026rsquo;s insight about system architecture or design patterns. It\u0026rsquo;s about providing better tools for analyzing existing systems and identifying improvement opportunities.\nThe Blueprint refactoring assistant might not generate YouTube views, but if it saves developers time and helps maintain cleaner codebases, it represents a more sustainable and practical approach to AI integration.\n","permalink":"http://localhost:1313/home-page-list/helping-ai-help-me-make-games/","summary":"Helping AI help me make games","title":"Helping AI help me make games"},{"content":"After years of low-poly assets, we decided to go realistic. This template features high-fidelity graphics, modular weapon attachments, and professional-grade animations. Includes advanced movement mechanics like sliding, vaulting, and tactical sprint. The biggest challenge was balancing visual fidelity with performance—turns out realistic graphics require realistic optimization efforts. Download the free demo to see if it\u0026rsquo;s right for your project.\n","permalink":"http://localhost:1313/projects/realistic-assault-rifle/","summary":"\u003cp\u003eAfter years of low-poly assets, we decided to go realistic. This template features high-fidelity graphics,\nmodular weapon attachments, and professional-grade animations. Includes advanced movement mechanics like sliding,\nvaulting, and tactical sprint. The biggest challenge was balancing visual fidelity with performance—turns out\nrealistic graphics require realistic optimization efforts. \u003ca href=\"#\"\u003eDownload the free demo\u003c/a\u003e to see if it\u0026rsquo;s right for your project.\u003c/p\u003e","title":"Realistic Assault Rifle Template"},{"content":"What started as a simple FPS template turned into our flagship product. Thousands of developers use it to build their shooter games without spending months on basic mechanics. Features 18 weapons, multiplayer support, AI enemies, and 240+ weapon materials. From prototypes to published games, it\u0026rsquo;s been quite the journey watching developers build amazing things with it. Try the free demo or check out the full template on the marketplace.\n","permalink":"http://localhost:1313/projects/low-poly-shooter-pack/","summary":"\u003cp\u003eWhat started as a simple FPS template turned into our flagship product. Thousands of developers use it to build\ntheir shooter games without spending months on basic mechanics. Features 18 weapons, multiplayer support, AI enemies,\nand 240+ weapon materials. From prototypes to published games, it\u0026rsquo;s been quite the journey watching developers\nbuild amazing things with it. \u003ca href=\"#\"\u003eTry the free demo\u003c/a\u003e or check out the \u003ca href=\"#\"\u003efull template on the marketplace\u003c/a\u003e.\u003c/p\u003e","title":"Low Poly Shooter Pack v6.0"},{"content":"Started as a simple FPS counter overlay for debugging frame drops in projects. Ended up as a comprehensive performance monitoring suite after discovering that measuring performance\u0026hellip; impacts performance. Go figure. Went through multiple iterations before finally cracking non-intrusive monitoring with async profiling. Currently optimizing the UI rendering pipeline because apparently I never learn. Download the tool or read the development blog series.\n","permalink":"http://localhost:1313/projects/unreal-performance-profiler/","summary":"\u003cp\u003eStarted as a simple FPS counter overlay for debugging frame drops in projects. Ended up as a comprehensive\nperformance monitoring suite after discovering that measuring performance\u0026hellip; impacts performance. Go figure.\nWent through multiple iterations before finally cracking non-intrusive monitoring with async profiling.\nCurrently optimizing the UI rendering pipeline because apparently I never learn.\n\u003ca href=\"#\"\u003eDownload the tool\u003c/a\u003e or read the \u003ca href=\"#\"\u003edevelopment blog series\u003c/a\u003e.\u003c/p\u003e","title":"Unreal Engine Performance Profiler"},{"content":"Sometimes developers just need good weapon models without the full template. This pack provides animated, low-poly guns that work across Unity and Unreal Engine. Each weapon is fully rigged with swappable parts—barrels, magazines, scopes, and more. The reload animations took longer to perfect than modeling all the weapons combined. Getting the magazine physics to feel natural while remaining performance-friendly was educational. Available on Unity Asset Store and Unreal Marketplace.\n","permalink":"http://localhost:1313/projects/low-poly-animated-guns/","summary":"\u003cp\u003eSometimes developers just need good weapon models without the full template. This pack provides animated,\nlow-poly guns that work across Unity and Unreal Engine. Each weapon is fully rigged with swappable parts—barrels,\nmagazines, scopes, and more. The reload animations took longer to perfect than modeling all the weapons combined.\nGetting the magazine physics to feel natural while remaining performance-friendly was educational.\nAvailable on \u003ca href=\"#\"\u003eUnity Asset Store\u003c/a\u003e and \u003ca href=\"#\"\u003eUnreal Marketplace\u003c/a\u003e.\u003c/p\u003e","title":"Low Poly Animated Modern Guns Pack"},{"content":"Managing assets across multiple platforms (Unity, Unreal, various marketplaces) was becoming a nightmare. Every update meant manually exporting for Unity URP, HDRP, Built-in, Unreal Engine versions, packaging for Gumroad, uploading everywhere, updating docs\u0026hellip; Built a system that handles the entire pipeline with one command. Sure, it took three weeks to build what would\u0026rsquo;ve taken a few hours to do manually, but now those few hours happen automatically forever. Read about how the pipeline works.\n","permalink":"http://localhost:1313/projects/automated-asset-pipeline/","summary":"\u003cp\u003eManaging assets across multiple platforms (Unity, Unreal, various marketplaces) was becoming a nightmare.\nEvery update meant manually exporting for Unity URP, HDRP, Built-in, Unreal Engine versions, packaging for\nGumroad, uploading everywhere, updating docs\u0026hellip; Built a system that handles the entire pipeline with one command.\nSure, it took three weeks to build what would\u0026rsquo;ve taken a few hours to do manually, but now those few hours\nhappen automatically forever. Read about \u003ca href=\"#\"\u003ehow the pipeline works\u003c/a\u003e.\u003c/p\u003e","title":"Automated Asset Pipeline"},{"content":"After rigging dozens of weapons manually, I got tired of repeating the same setup process. This Blender add-on automates weapon rigging, attachment systems, and animation setup. What used to take hours now takes minutes. The first version tried to automate everything and failed spectacularly on edge cases. The current version handles the tedious parts while leaving creative control to the artist. Now part of our internal workflow and available free on GitHub.\n","permalink":"http://localhost:1313/projects/blender-weapon-rigging/","summary":"\u003cp\u003eAfter rigging dozens of weapons manually, I got tired of repeating the same setup process. This Blender add-on\nautomates weapon rigging, attachment systems, and animation setup. What used to take hours now takes minutes.\nThe first version tried to automate everything and failed spectacularly on edge cases. The current version handles\nthe tedious parts while leaving creative control to the artist. Now part of our internal workflow and\n\u003ca href=\"#\"\u003eavailable free on GitHub\u003c/a\u003e.\u003c/p\u003e","title":"Blender Weapon Rigging System"}]